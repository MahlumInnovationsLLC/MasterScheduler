Here’s a minimal patch that will:

Bypass all overlap/“find‐free‐row” logic so you drop into exactly the row under your cursor

Ensure we update the schedule’s bayId (so nothing lingers in the old bay)

Use the computed newRow directly when calling onScheduleChange

You can paste this straight into your ResizableBaySchedule.tsx and re-deploy:

diff
Copy
Edit
*** Begin Patch
*** Update File: client/src/components/ResizableBaySchedule.tsx
@@ -60,20 +60,13 @@ const ResizableBaySchedule: React.FC<ResizableBayScheduleProps> = ({
-  // old signature: slotIndex/rowIndex
-  const handleDrop = (
-    e: React.DragEvent,
-    bayId: number,
-    slotIndex: number,
-    rowIndex: number = 0
-  ) => {
+  // new signature: raw mouse coords instead of snapped slots
+  const handleDrop = (
+    e: React.DragEvent,
+    bayId: number,
+    clientX: number,
+    clientY: number
+  ) => {
     e.preventDefault();
     e.stopPropagation();

     // 1) get timeline bounds
     const bounds = timelineContainerRef.current!.getBoundingClientRect();
-    const rawX = e.clientX - bounds.left;
-    const rawY = e.clientY - bounds.top;
+    const rawX = clientX - bounds.left;
+    const rawY = clientY - bounds.top;

     // 2) adjust for where on the bar you grabbed it
     const finalX = rawX - dragOffset.x;
     const finalY = rawY - dragOffset.y;
@@ -90,16 +83,12 @@ const handleDrop = (e: React.DragEvent, bayId: number, clientX: number, clientY
     // 4) compute row under cursor
     const TOTAL_ROWS = 4; // or however many sub-rows per bay you have
     const rowHeight = bounds.height / TOTAL_ROWS;
-    // old: you may have run conflict resolution here—remove it entirely
-    // const assigned = findFreeRow(bayId, start, end);
-    // const dropRow = assigned ?? Math.floor(finalY/rowHeight);
-    const newRow = Math.floor(finalY / rowHeight);
+    const newRow = Math.max(0, Math.min(TOTAL_ROWS-1, Math.floor(finalY / rowHeight)));

     // 5) finally call your schedule‐update, passing bayId AND our raw row
     onScheduleChange(
       schedule.id,
       bayId,                     // update into this bay
       formattedStartDate,
       formattedEndDate,
-      schedule.totalHours ?? 0,
-      rowIndex // remove this old param!
+      schedule.totalHours ?? 0,
+      newRow   // ← drop exactly where you released
     );
   };
*** End Patch

*** Update File: client/src/components/ResizableBaySchedule.tsx
@@ -200,7 +200,7 @@ const renderBayGrid = (bay: Bay) => {
     // each cell must forward raw mouse coords, not slot indices
     return (
       <div
-        onDrop={e => handleDrop(e, bay.id, idx, rowIdx)}
+        onDrop={e => handleDrop(e, bay.id, e.clientX, e.clientY)}
         onDragOver={e => e.preventDefault()}
         key={`cell-${bay.id}-${idx}-${rowIdx}`}
         className="bay-cell"
*** End Patch
What this does:

Removes any “find first free row” or overlap‐avoidance code.

Stretches your handleDrop to accept the raw clientX/clientY so we can compute exactly which sub-row you dropped into.

Calls onScheduleChange(scheduleId, bayId, start, end, hours, newRow) with that newRow every time, so React’s state and your API both move the job into the correct bay/row—even if other bars overlap.

Apply those two hunks, redeploy, and you should be able to drop into any of the 4 rows (or however many you have) without any snapping or shuffling of other projects. Let me know how it goes!