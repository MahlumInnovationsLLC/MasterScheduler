import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import MultiRowBayContent from './MultiRowBayContent';
import { 
  format, 
  addDays, 
  differenceInDays, 
  differenceInMonths, 
  isSameDay, 
  addWeeks, 
  addMonths, 
  startOfMonth, 
  endOfMonth, 
  startOfWeek, 
  endOfWeek,
  getDaysInMonth
} from 'date-fns';
import { updatePhaseWidthsWithExactFit, calculateExactFitPhaseWidths, applyPhaseWidthsToDom } from './ExactFitPhaseWidths';
import { isBusinessDay, adjustToNextBusinessDay, adjustToPreviousBusinessDay } from '@shared/utils/date-utils';
import { 
  PlusCircle, 
  GripVertical, 
  Info, 
  X, 
  ChevronRight, 
  ChevronLeft, 
  PencilIcon, 
  PlusIcon, 
  MinusIcon,
  Users, 
  Zap, 
  Wrench, // Replacing Tool with Wrench
  Clock,
  Calendar,
  AlertTriangle,
  CheckCircle2,
  Clock3,
  Truck
} from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { useToast } from "@/hooks/use-toast";
import { ScrollArea } from '@/components/ui/scroll-area';
import { useApiRequest } from '@/lib/queryClient';

interface ManufacturingBay {
  id: number;
  name: string;
  bayNumber: number;
  status: 'active' | 'inactive' | 'maintenance';
  description: string | null;
  location: string | null;
  team: string | null;
  capacityTonn: number | null;
  maxWidth: number | null;
  maxHeight: number | null;
  maxLength: number | null;
  teamId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
}

interface Project {
  id: number;
  name: string;
  projectNumber: string;
  status: string;
  description: string | null;
  team: string | null;
  createdAt: Date | null;
  startDate: Date | null;
  shipDate: Date | null;
  // And other project fields
}

interface ManufacturingSchedule {
  id: number;
  projectId: number;
  bayId: number;
  startDate: Date;
  endDate: Date;
  totalHours: number;
  row?: number;
  createdAt?: Date;
  updatedAt?: Date;
}

interface ResizableBayScheduleProps {
  schedules: ManufacturingSchedule[];
  projects: Project[];
  bays: ManufacturingBay[];
  onScheduleChange: (scheduleId: number, newBayId: number, newStartDate: string, newEndDate: string, totalHours?: number, rowIndex?: number) => Promise<any>;
  onScheduleCreate: (projectId: number, bayId: number, startDate: string, endDate: string, totalHours?: number, rowIndex?: number) => Promise<any>;
  onScheduleDelete?: (scheduleId: number) => Promise<any>;
  onBayCreate?: (bay: Partial<ManufacturingBay>) => Promise<any>;
  onBayUpdate?: (id: number, bay: Partial<ManufacturingBay>) => Promise<any>;
  onBayDelete?: (id: number) => Promise<any>;
  dateRange: { start: Date, end: Date };
  viewMode: 'day' | 'week' | 'month' | 'quarter';
}

interface ScheduleBar {
  id: number;
  projectId: number;
  bayId: number;
  startDate: Date;
  endDate: Date;
  totalHours: number;
  projectName: string;
  projectNumber: string;
  width: number; // Width based on time period
  left: number; // Left position (start)
  color: string;
  // For multi-row layout within a bay
  row?: number; // 0-3 for 4 rows per bay
  
  // Department phase percentages
  fabPercentage: number; // Default 27%
  paintPercentage: number; // Default 7%
  productionPercentage: number; // Default 60%
  itPercentage: number; // Default 7%
  ntcPercentage: number; // Default 7% 
  qcPercentage: number; // Default 7%
  
  // Normalization factor for phase width calculations
  normalizeFactor?: number;
  
  // Width calculations for phases
  fabWidth?: number; // Width of FAB phase on visualization
  paintWidth?: number; // Width of PAINT phase
  productionWidth?: number; // Width of PRODUCTION phase
  itWidth?: number; // Width of IT phase 
  ntcWidth?: number; // Width of NTC phase
  qcWidth?: number; // Width of QC phase
  
  // Legacy field
  fabWeeks: number; // Number of weeks for FAB phase
}

type TimeSlot = {
  date: Date;
  formattedStartDate?: string;
  formattedEndDate?: string;
  isStartOfMonth: boolean;
  isStartOfWeek: boolean;
  isBusinessDay: boolean;
  monthName?: string;
  weekNumber?: number;
};

const BAY_COLORS = [
  'bg-blue-500',
  'bg-green-500',
  'bg-yellow-500',
  'bg-purple-500',
  'bg-indigo-500',
  'bg-pink-500',
  'bg-orange-500',
  'bg-teal-500',
  'bg-cyan-500',
  'bg-lime-500',
  'bg-emerald-500',
  'bg-sky-500',
  'bg-red-500',
];

const PROJECT_COLORS = [
  'rgb(59, 130, 246)', // blue-500
  'rgb(16, 185, 129)', // green-500
  'rgb(234, 179, 8)',  // yellow-500
  'rgb(168, 85, 247)', // purple-500
  'rgb(99, 102, 241)', // indigo-500
  'rgb(236, 72, 153)', // pink-500
  'rgb(249, 115, 22)', // orange-500
  'rgb(20, 184, 166)', // teal-500
  'rgb(6, 182, 212)',  // cyan-500
  'rgb(132, 204, 22)', // lime-500
  'rgb(16, 185, 129)', // emerald-500
  'rgb(14, 165, 233)', // sky-500
  'rgb(239, 68, 68)',  // red-500
];

// Multi-bay teams now have a single row per bay (simplified layout)
// This makes bays work like horizontal tracks with NO multi-row complexity
const getBayRowCount = (bayId: number, bayName: string) => {
  console.log(`Single row configuration for bay ${bayId} (${bayName}) - new team-based layout`);
  
  // NEW SIMPLIFIED MODEL:
  // - Each bay has exactly ONE row
  // - Team-based organization now groups 2 bays = 1 team
  // - Simplified row calculation guarantees pixel-perfect placement
  return 1; // Always return 1 row for the simplified single-row layout
};

const generateTimeSlots = (dateRange: { start: Date, end: Date }, viewMode: 'day' | 'week' | 'month' | 'quarter') => {
  const slots: TimeSlot[] = [];
  
  // Define slot width based on view mode
  let slotWidth = 35; // default for week view
  
  // Adjust slot width based on view mode
  switch (viewMode) {
    case 'day':
      slotWidth = 25; // narrower for day view (more granular)
      break;
    case 'week':
      slotWidth = 35; // standard width for week view
      break;
    case 'month':
      slotWidth = 90; // wider for month view
      break;
    case 'quarter':
      slotWidth = 140; // very wide for quarter view
      break;
  }
  
  // Use the provided date range consistently across all view modes
  let currentDate = new Date(dateRange.start);
  
  // Important: Always normalize the date to midnight
  currentDate.setHours(0, 0, 0, 0);
  
  console.log(`VIEW MODE: ${viewMode} - Using timeline from ${format(dateRange.start, 'yyyy-MM-dd')} to ${format(dateRange.end, 'yyyy-MM-dd')} with ${slotWidth}px slots`);
  
  // Generate slots based on view mode
  while (currentDate <= dateRange.end) {
    const isStartOfMonth = currentDate.getDate() === 1;
    const isStartOfWeek = currentDate.getDay() === 1; // Monday as start of week
    const isCurrentDateBusinessDay = isBusinessDay(currentDate);
    
    // Create slot with formatted dates appropriate for the view mode
    slots.push({
      date: new Date(currentDate),
      isStartOfMonth,
      isStartOfWeek,
      isBusinessDay: isCurrentDateBusinessDay,
      formattedStartDate: format(currentDate, viewMode === 'day' ? 'MMM d' : 
                                            viewMode === 'week' ? 'MMM d' : 
                                            viewMode === 'month' ? 'MMM yyyy' : 
                                            'Q[Q] yyyy'),
      monthName: isStartOfMonth ? format(currentDate, viewMode === 'month' || viewMode === 'quarter' ? 'MMMM yyyy' : 'MMMM') : undefined,
      weekNumber: isStartOfWeek ? Math.ceil(differenceInDays(currentDate, new Date(currentDate.getFullYear(), 0, 1)) / 7) : undefined
    });
    
    // Advance date based on view mode
    switch (viewMode) {
      case 'day':
        currentDate = addDays(currentDate, 1);
        break;
        
      case 'week':
        // Always move forward by exactly 7 days for consistency
        currentDate = addDays(currentDate, 7);
        break;
        
      case 'month':
        // Move to first day of next month
        currentDate = addMonths(currentDate, 1);
        currentDate.setDate(1);
        break;
        
      case 'quarter':
        // Move to first day of next quarter month (Jan, Apr, Jul, Oct)
        const nextQuarter = addMonths(currentDate, 3);
        nextQuarter.setDate(1);
        currentDate = nextQuarter;
        break;
    }
  }
  
  return { slots, slotWidth };
};

// Component to display bay capacity information and status indicators
const BayCapacityInfo = ({ bay, allSchedules, projects, bays }: { bay: ManufacturingBay, allSchedules: ManufacturingSchedule[], projects: Project[], bays: ManufacturingBay[] }) => {
  // Get scheduled projects for this bay
  const baySchedules = allSchedules.filter(s => s.bayId === bay.id);
  const activeProjects = baySchedules.length;
  
  // Determine capacity status 
  let capacityPercentage = 0;
  if (activeProjects > 0) {
    // Calculate based on project count
    capacityPercentage = Math.min(activeProjects * 50, 100); // 2+ projects = 100% capacity
  }
  
  let statusText = 'Available';
  let statusBg = 'bg-green-500';
  let statusIcon = <CheckCircle2 className="h-4 w-4 text-white" />;
  
  if (capacityPercentage >= 100) {
    statusText = 'At Capacity';
    statusBg = 'bg-red-500';
    statusIcon = <AlertTriangle className="h-4 w-4 text-white" />;
  } else if (capacityPercentage >= 50) {
    statusText = 'Near Capacity';
    statusBg = 'bg-amber-500';
    statusIcon = <Clock3 className="h-4 w-4 text-white" />;
  }
  
  console.log(`Bay ${bay.name} at ${capacityPercentage}% capacity with ${activeProjects === 0 ? 'no projects' : activeProjects + ' project' + (activeProjects > 1 ? 's' : '')}`);
  console.log(`Bay ${bay.name} final status: ${statusText} with ${activeProjects} active project${activeProjects !== 1 ? 's' : ''}`);
  
  return (
    <div className="bay-capacity-info absolute right-2 top-2 flex items-center space-x-2">
      <div className={`status-indicator ${statusBg} text-white text-xs px-2 py-0.5 rounded-full flex items-center`}>
        {statusIcon}
        <span className="ml-1">{statusText}</span>
      </div>
      <div className="project-count bg-gray-200 text-gray-800 text-xs px-2 py-0.5 rounded-full">
        {activeProjects} project{activeProjects !== 1 ? 's' : ''}
      </div>
    </div>
  );
};

export default function ResizableBaySchedule({
  schedules,
  projects,
  bays,
  onScheduleChange,
  onScheduleCreate,
  onScheduleDelete,
  onBayCreate,
  onBayUpdate,
  onBayDelete,
  dateRange,
  viewMode
}: ResizableBayScheduleProps) {
  const { toast } = useToast();
  const apiRequest = useApiRequest();
  
  // State for managing UI
  const [scheduleBars, setScheduleBars] = useState<ScheduleBar[]>([]);
  const [draggingSchedule, setDraggingSchedule] = useState<number | null>(null);
  const [dropTarget, setDropTarget] = useState<{ bayId: number, rowIndex: number } | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [newBayDialog, setNewBayDialog] = useState(false);
  const [editingBay, setEditingBay] = useState<ManufacturingBay | null>(null);
  const [deleteRowDialogOpen, setDeleteRowDialogOpen] = useState(false);
  const [confirmRowDelete, setConfirmRowDelete] = useState<{
    bayId: number;
    rowIndex: number;
    bayName: string;
    rowNumber: number;
    affectedProjects: {
      id: number;
      projectId: number;
      projectName: string;
      projectNumber: string;
    }[];
  } | null>(null);
  const [currentProject, setCurrentProject] = useState<number | null>(null);
  const [targetBay, setTargetBay] = useState<number | null>(null);
  const [targetStartDate, setTargetStartDate] = useState<Date | null>(null);
  const [targetEndDate, setTargetEndDate] = useState<Date | null>(null);
  const [scheduleDuration, setScheduleDuration] = useState(4); // in weeks
  const [rowHeight, setRowHeight] = useState(60); // Height of each row in pixels
  const [sidebarOpen, setSidebarOpen] = useState(false);
  // Get time slots and slot width based on view mode 
  const { slots, slotWidth } = useMemo(() => {
    return generateTimeSlots(dateRange, viewMode);
  }, [dateRange, viewMode]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  const [showAddMultipleWarning, setShowAddMultipleWarning] = useState(false);
  const [showQcDaysWarning, setShowQcDaysWarning] = useState(false);
  const [modifiedSchedule, setModifiedSchedule] = useState<ScheduleBar | null>(null);
  const [originalSchedule, setOriginalSchedule] = useState<ScheduleBar | null>(null);
  const [showRevertDialog, setShowRevertDialog] = useState(false);
  
  // Track the viewport element for scrolling
  const viewportRef = useRef<HTMLDivElement>(null);
  const timelineRef = useRef<HTMLDivElement>(null);
  
  // Group bays into teams (2 bays = 1 team)
  const bayTeams = useMemo(() => {
    const sortedBays = [...bays].sort((a, b) => a.bayNumber - b.bayNumber);
    
    // Group bays into teams of 2
    const teams: ManufacturingBay[][] = [];
    
    // For each pair of bays, create a team
    for (let i = 0; i < sortedBays.length; i += 2) {
